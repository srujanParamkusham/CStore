@using CStore.Domain.Domains.Admin.Models.ViewModels.AppContentMaintenance
@model CStore.Domain.Domains.Admin.Models.ViewModels.AppContentMaintenance.AppContentMaintenanceListViewModel
@{
    ViewBag.Title = "App Content Maintenance";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <h5>@ViewBag.Title</h5>
            <div class="ibox-tools">
                <a class="collapse-link">
                    <i class="fa fa-chevron-up"></i>
                </a>
            </div>
        </div>
        <div class="ibox-content">
            @Catalyst.Partial("_ValidationSummaryErrors")

            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "searchParamsForm", @class = "form-horizontal" }))
            {
                <div class="row search-criteria-div">
                    <div class="form-group col-sm-3" style="margin-right: 1em;">
                        @Catalyst.LabelFor(p => p.ContentGroup, new { @class = "control-label" })<br />
                        @Catalyst.EditorFor(p => p.ContentGroup, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.ContentGroup)
                    </div>
                    <div class="form-group col-sm-3" style="margin-right: 1em;">
                        @Catalyst.LabelFor(p => p.ContentName, new { @class = "control-label" })<br />
                        @Catalyst.EditorFor(p => p.ContentName, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.ContentName)
                    </div>
                    <div class="form-group col-sm-3" style="margin-right: 1em;">
                        @Catalyst.LabelFor(p => p.ContentValue, new { @class = "control-label" })<br />
                        @Catalyst.EditorFor(p => p.ContentValue, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.ContentValue)
                    </div>
                    <div class="form-group col-sm-3" style="margin-right: 1em;">
                        @Catalyst.LabelFor(p => p.Active, new { @class = "control-label" })<br />
                        @Catalyst.EditorFor(p => p.Active, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.Active)
                    </div>
                    <div class="col-sm-3 pull-right text-right" style="padding-top: 2em;">
                        @Catalyst.Button("Search", new { type = "submit", @class = "btn btn-primary m-b btn-fixed-width-sm", id = "SearchButton" })
                        @Catalyst.Button("Clear", new { type = "reset", @class = "btn m-b btn-fixed-width-sm", id = "ClearButton" })
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<div class="row">
    <div class="ibox float-e-margins">
        <div class="ibox-content">
            @Catalyst.Grid(new DomainGridConfiguration()
                    {
                        ID = "mainDataTable",
                        AjaxUrl = Url.Action(MVC.Admin.AppContentMaintenance.List()),
                        KeyColumnName = "AppContentId",
                        ParametersFormId = "searchParamsForm",
                        DefaultModalDetails = false,
                        EditAction = Url.Action(MVC.Admin.AppContentMaintenance.Edit()),
                        DeleteAction = Url.Action(MVC.Admin.AppContentMaintenance.Delete())
                    }
                    .AddColumn("", "", ColumnTypes.Select)
                    .AddColumn("AppContentId", "ID", ColumnTypes.Link,
                        new
                        {
                            RenderUrlToOpen = Url.Action(MVC.Admin.AppContentMaintenance.Edit()),
                            RenderUrlToOpenParameter = "AppContentId"
                        }
                    )
                    .AddColumn("ContentGroup", "Group", ColumnTypes.ReadOnly,
                                new
                                {
                                    DefaultSortPosition = 1,
                                    DefaultSortDirection = SortDirection.Ascending
                                })
                    .AddColumn("ContentValue", "Value", ColumnTypes.ReadOnly,
                                new
                                {
                                    DefaultSortPosition = 2,
                                    DefaultSortDirection = SortDirection.Ascending
                                })
                    .AddColumn("Active", "Active", ColumnTypes.ReadOnly,
                    new
                    {
                        DataFormat = ColumnFormats.YesNo
                    })
                    .AddButton(StandardButtons.New)
                    .AddButton(StandardButtons.Edit)
                    .AddButton(StandardButtons.Delete)
                    .AddButton(StandardButtons.SelectAll)
                    .AddButton(StandardButtons.DeselectAll)
                )
        </div>
    </div>
</div>