@model CStore.Domain.Domains.Admin.Models.ViewModels.AppMenuItemMaintenance.AppMenuItemMaintenanceEditViewModel

@{
    ViewBag.Title = "Create New App Menu Item";
    Layout = (!Model.IsModalDialog) ? "~/Views/Shared/_Layout.cshtml" : null;
    if (Model.AppMenuItemId != null && Model.AppMenuItemId > 0)
    {
        ViewBag.Title = "Edit App Menu Item";
    }
}

@{
    //Generate unique IDs for the form and ajax wrapper around the form
    var ticks = DateTime.Now.Ticks.ToString();
    var formWrapperId = "formWrapper_" + ticks;
    var formId = "form_" + ticks;
    //Give the textarea a unique id so we can have multiple tinymce editors operate properly in a nested modal environment
    var AppMenuItemTextId = "AppMenuItemText_" + ticks;
}    

<div class="ibox float-e-margins ajax-form-wrapper" id="@formWrapperId">
    @using (
        (Model.IsModalDialog) 
            ? Ajax.BeginForm(MVC.Admin.AppMenuItemMaintenance.Edit(), 
                            new AjaxOptions { OnSuccess = "Cat.UI.Modal.onAjaxFormPostSuccess(data, this)", HttpMethod = "POST" }, 
                            new { id = formId })
            : Html.BeginForm(MVC.Admin.AppMenuItemMaintenance.Edit(), FormMethod.Post, new { id="mainForm" }))
    {
        <div class="@(Model.IsModalDialog ? "modal-header" : "ibox-title")">
            @if (Model.IsModalDialog)
            {
                <button aria-hidden="true" data-dismiss="modal" class="close" type="button">×</button>
            }
            <h5>@ViewBag.Title</h5>
        </div>
        <div class="ibox-content">
            <div class="@(Model.IsModalDialog ? "modal-body" : "")">
                @Catalyst.HiddenFor(p => p.AppMenuItemId)
                @Catalyst.HiddenFor(p => p.IsModalDialog)
                @Catalyst.HiddenFor(p => p.ReturnUrl)
                @Catalyst.Partial("_ValidationSummaryErrors")

                <div class="col-sm-6">

                    <div class="form-group">
                        @Catalyst.LabelFor(p => p.AppMenuId, new { @class = "control-label" })
                        @Catalyst.DropDownListFor(m => m.AppMenuId, Model.AppMenuSelectList, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.AppMenuId)
                    </div>

                    <div class="form-group">
                        @Catalyst.LabelFor(p => p.ParentAppMenuItemId, new { @class = "control-label" })
                        @Catalyst.DropDownListFor(m => m.ParentAppMenuItemId, Model.ParentAppMenuItemSelectList, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.ParentAppMenuItemId)
                    </div>

                    <div class="form-group">
                        @Catalyst.LabelFor(p => p.Name, new { @class = "control-label" })
                        @Catalyst.EditorFor(p => p.Name, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.Name)
                    </div>

                    <div class="form-group">
                        @Catalyst.LabelFor(p => p.Handler, new { @class = "control-label" })
                        @Catalyst.EditorFor(p => p.Handler, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.Handler)
                    </div>

                    <div class="form-group">
                        @Catalyst.LabelFor(p => p.Image, new { @class = "control-label" })
                        @Catalyst.EditorFor(p => p.Image, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.Image)
                    </div>

                    <div class="form-group">
                        @Catalyst.LabelFor(p => p.Text, new { @class = "control-label" })
                        @Catalyst.EditorFor(p => p.Text, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.Text)
                    </div>

                    <div class="form-group">
                        @Catalyst.LabelFor(p => p.Style, new { @class = "control-label" })
                        @Catalyst.EditorFor(p => p.Style, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.Style)
                    </div>

                    <div class="form-group">
                        @Catalyst.LabelFor(p => p.Tooltip, new { @class = "control-label" })
                        @Catalyst.EditorFor(p => p.Tooltip, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.Tooltip)
                    </div>

                    <div class="form-group">
                        @Catalyst.LabelFor(p => p.Sort, new { @class = "control-label" })
                        @Catalyst.EditorFor(p => p.Sort, new { @class = "form-control" })
                        @Catalyst.ValidationMessageFor(p => p.Sort)
                    </div>
                </div>

                <div class="row"></div> 

                <div class="col-sm-4">
                    <div class="form-group">
                        @Catalyst.EditorFor(p => p.Active, new { @class = "form-control" })
                        @Catalyst.LabelFor(p => p.Active, new { @class = "control-label" })
                        @Catalyst.ValidationMessageFor(p => p.Active)
                    </div>
                </div>

                <div class="row"></div> 

                <div class="@(Model.IsModalDialog ? "modal-footer" : "")">
                    <div class="row form-action-buttons-div">
                        <div class="col-sm-8 col-sm-offset-2">
                            @Catalyst.SubmitButton("Save", new { @class = "btn btn-primary m-b btn-fixed-width-md", id="SaveButton", Name="SubmitAction", Value="Save" }) 
                            @Catalyst.SubmitButton("Save and Exit", new { @class = "btn m-b btn-fixed-width-md", id="SaveAndExitButton", Name="SubmitAction", Value="SaveAndExit" }) 
                            @Catalyst.Button("Cancel", new { @class = "btn m-b btn-fixed-width-md cancel", id="CancelButton", Name="SubmitAction", Value="Cancel", formnovalidate="formnovalidate", data_dismiss="modal"})
                        </div>
                    </div>
                </div>
            </div>

            <div class="row"></div> 
        </div>
    }
</div>
