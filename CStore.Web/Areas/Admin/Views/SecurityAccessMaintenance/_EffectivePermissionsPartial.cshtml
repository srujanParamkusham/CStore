@model CStore.Domain.Domains.Admin.Models.ViewModels.SecurityAccessMaintenance.GetEffectivePermissionsForSecurableViewModel
<div id="EffectivePermissionsDiv">
    @Catalyst.Partial("_ValidationSummaryErrors")

    @if (Model != null && Model.EffectivePermissionsForSecurable != null && Model.EffectivePermissionsForSecurable.EffectivePermissionsForRoles != null)
    {
        using (
            Ajax.BeginForm(MVC.Admin.SecurityAccessMaintenance.GetEffectivePermissionsForSecurable(), 
                                new AjaxOptions { OnSuccess = "onEffectivePermissionsRefreshSuccess(data, this)", HttpMethod = "POST" }, 
                                new { id = "EffectivePermissionsForm" }))
        {
            @Catalyst.HiddenFor(p => p.SecuritySecurableId)
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Role Selection</h5>
                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">
                   <div id="RoleSelectionDiv" >
                        <div class="col-sm-5">
                            <h5>Available Roles To Edit</h5>
                            @Html.DropDownList("AvailableRoleIds", Model.AvailableRolesSelectList, new { @class = "form-control", multiple = "multiple",  size = 5 })
                        </div>

                        <div class="col-sm-2" style="padding-top: 50px; padding-right: 20px;">
                            @Catalyst.Button(">", new {@id="RoleAddButton", @class="btn"})
                            <br/>
                            @Catalyst.Button("<", new {@id="RoleRemoveButton", @class="btn"})
                        </div>

                        <div class="col-sm-5">
                            <h5>Selected Roles To Edit</h5>
                            @Catalyst.DropDownListFor(m => m.SelectedRoleIds, Model.SelectedRolesSelectList, new { @class = "form-control", multiple = "multiple",  size = 5 })
                        </div>
                    </div>

                    <div class="row" style="margin: 5px 0;">&nbsp;</div>
        
                    <!--Spacer-->
                    <div class="row">&nbsp;</div>
                </div>
            </div>


            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>
                        Effective Permissions<br/>                        
                    </h5>

                    <div class="ibox-tools">
                        @Catalyst.SubmitButton("Save", new { @class = "btn btn-primary m-b btn-fixed-width-sm", id="SaveButton", Name="SubmitAction", Value="Save" }) 
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">                    
                    @if (Model.SelectedRoleIds != null && Model.SelectedRoleIds.Count > 0)
                    {
                        @*
                        <div>
                            @Model.EffectivePermissionsForSecurable.SecuritySecurable.Name
                        </div>
                        *@ 

                        //
                        //Create an index to use for the properties. To bind to a dictionary, the submitted values
                        //MUST start with 0 and be consecutive with no breaks.
                        //So, for the disabled/noneditable fields, we use a -1 for their indexes since they should
                        //never get posted
                        //
                        int index = 0;                

                        <table class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>Role</th>
                                    <th>Action</th>
                                    <th class="text-center">Allowed</th>
                                    <th class="text-center">Not Allowed</th>
                                    <th class="text-center">Inherited</th>
                                    <th class="text-center">Current Permission</th>
                                    <th class="text-center">Inherited</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var effectivePermissionsForRole in Model.EffectivePermissionsForSecurable.EffectivePermissionsForRoles)
                                {
                                    <tr>
                                        <td colspan="7" style="font-size: 1.1em; font-weight: bold;">@effectivePermissionsForRole.SecurityRole.Name</td>            
                                    </tr>
                                    foreach (var effectivePermission in effectivePermissionsForRole.EffectivePermissions)
                                    {
                                        //Generate unique IDs for the radio button groups
                                        var radioGroupIdSuffix = effectivePermission.SecuritySecurableAction.SecuritySecurableActionId + "~" + effectivePermissionsForRole.SecurityRole.SecurityRoleId;

                                        <tr>
                                            <td></td>
                                            <td>@effectivePermission.SecuritySecurableAction.SecurityAction.Name</td>
                                            <td class="text-center">
                                                @*I used a manual hidden tag below on purpose. Using Html.Hidden was losing the key value sometimes, giving the value of a prior hidden item. I could never determine why, but swapping to a hidden field manually created fixes it.*@
                                                <input type="Hidden" name="SecurityAccessSettings[@index].Key" value="@radioGroupIdSuffix"/>
                                                @Html.RadioButton("PermissionRadio-"+radioGroupIdSuffix, "Allowed", (effectivePermission.Allowed && !effectivePermission.Inherited), new { id = "PermissionRadio-"+radioGroupIdSuffix, Name="SecurityAccessSettings["+index+"].Value"})
                                            </td>
                                            <td class="text-center">
                                                @Html.RadioButton("PermissionRadio-"+radioGroupIdSuffix, "NotAllowed", (!effectivePermission.Allowed && !effectivePermission.Inherited), new { id = "PermissionRadio-"+radioGroupIdSuffix, Name="SecurityAccessSettings["+index+"].Value"})
                                            </td>
                                            <td class="text-center">
                                                @Html.RadioButton("PermissionRadio-"+radioGroupIdSuffix, "Inherited", (effectivePermission.Inherited), new { id = "PermissionRadio-"+radioGroupIdSuffix, Name="SecurityAccessSettings["+index+"].Value"})
                                            </td>
                                            <td class="text-center">
                                                @if (effectivePermission.Allowed)
                                                {
                                                    <i class="fa fa-check" style="color: green;"></i>
                                                }
                                                else
                                                {
                                                    <i class="fa fa-minus-circle" style="color: red;"></i>
                                                }
                                            </td>
                                            <td class="text-center">
                                                @if (effectivePermission.Inherited)
                                                {
                                                    <span data-toggle="tooltip" title="@effectivePermission.SecuritySecurableInheritedFrom.Name">Yes</span>
                                                }
                                            </td>
                                        </tr>
                                        index ++;
                                    }
                                }
                            </tbody>
                        </table>       
                    }
                    else {
                    <span>
                        Select the roles that you would like to see the effective permissions for.
                    </span>
                    }             
                    <!--Spacer-->
                    <div class="row">&nbsp;</div>
                </div>
            </div>       
        }

        <script type="text/javascript">
            $(document).ready(function () {         
                //
                //Script to move roles between available and assigned
                //
                $('#RoleAddButton').click(function () {
                    var result = !$('#AvailableRoleIds option:selected').remove().appendTo('#SelectedRoleIds');
                    $('#EffectivePermissionsForm').submit();
                    return result;
                });
                $('#RoleRemoveButton').click(function () {
                    var result = !$('#SelectedRoleIds option:selected').remove().appendTo('#AvailableRoleIds');
                    $('#EffectivePermissionsForm').submit();
                    return result;
                });

                //
                //Select all of the Selected Role IDs on submit so that they get submitted and saved.
                //Otherwise the array of role ids will be empty and will not properly save on the server.
                //
                $('#EffectivePermissionsForm').on("submit", function (event) {
                    //console.log("Form submitted");
                    $('#SelectedRoleIds option').prop('selected', true);
                });
                
                //
                //Show any toast messages that may have occurred.
                //
                Cat.UI.ToastMessage.showAllToastMessagesUsingAjax();
                

                //
                //Collapse ibox function
                //This is taken from the Inspinia script, its needed to rebind the collapse options 
                //on the form.
                //
                $('.collapse-link').click(function () {
                    var ibox = $(this).closest('div.ibox');
                    var button = $(this).find('i');
                    var content = ibox.find('div.ibox-content');
                    content.slideToggle(200);
                    button.toggleClass('fa-chevron-up').toggleClass('fa-chevron-down');
                    ibox.toggleClass('').toggleClass('border-bottom');
                    setTimeout(function () {
                        ibox.resize();
                        ibox.find('[id^=map-]').resize();
                    }, 50);
                });
            });
        
            //
            //Callback for when the effective permissions form is successfully posted
            //
            function onEffectivePermissionsRefreshSuccess (data, form) {
                //console.log("onEffectivePermissionsRefreshSuccess");
                //console.log(data);
                $("#EffectivePermissionsDiv").replaceWith(data);
            }
        </script>
    }
    else
    {
        <span>
            Select a securable in the tree to see the effective permissions for all roles on it.
        </span>
    }
</div>